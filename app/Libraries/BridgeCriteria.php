<?php
namespace App\Libraries;

use App\Libraries\DBCriteriaInterface;
/**
 *  class Combination Bridge
 *  @author Ahmed Fouad
 */
class BridgeCriteria extends CDbCriteria implements DBCriteriaInterface
{
    public $table = "";
    public $attributes = [];

    public function __construct($table = "")
    {
        $this->table = $table;
    }

    public function compare($column, $value, $partialMatch = false, $operator = 'AND', $escape = true)
    {
        $this->attributes[$column] = $value;
        return parent::compare($column, $value, $partialMatch, $operator, $escape);
    }

    /**
     * Appends an IN condition to the existing {@link condition}.
     * The IN condition and the existing condition will be concatenated via the specified operator
     * which defaults to 'AND'.
     * The IN condition is generated by using the SQL IN operator which requires the specified
     * column value to be among the given list of values.
     * @param string $column the column name (or a valid SQL expression)
     * @param array $values list of values that the column value should be in
     * @param string $operator the operator used to concatenate the new condition with the existing one.
     * Defaults to 'AND'.
     * @return static the criteria object itself
     */
    public function addInCondition($column, $values, $operator = 'AND')
    {
        $this->attributes[$column] = $values;

        if (($n = count($values)) < 1) {
            $condition = '0=1';
        }
        // 0=1 is used because in MSSQL value alone can't be used in WHERE
        else {
            $params = array();
            foreach ($values as $value) {
                $params[] = self::PARAM_PREFIX . self::$paramCount;
                $this->params[self::PARAM_PREFIX . self::$paramCount++] = $value;
            }
            $condition = $column . ' IN (' . implode(', ', $params) . ')';
        }
        return $this->addCondition($condition, $operator);
    }

}
